{"name":"pgShark","tagline":"Messing with PostgreSQL network traffic to make some usefull things","body":"\r\n    \r\n    pgShark is a Perl module able to mess with PostgreSQL network\r\n    traffic\r\n\r\nSynopsis\r\n==================\r\n\r\nA simple exemple to count the number of connections and disconnections on localhost, live version:\r\n\r\n```perl\r\n        use pgShark;\r\n\r\n        my ($cnx, $dcnx) = (0, 0);\r\n        my $dev = 'lo';\r\n        my $err;\r\n\r\n        $shark = pgShark->new({\r\n            'procs' => {\r\n                'AuthenticationOk' => sub {$cnx++},\r\n                'Terminate' => sub {$dcnx++},\r\n            },\r\n            'host' => '127.0.0.1',\r\n            'port' => 5432\r\n        });\r\n\r\n        die \"Can not open interface $dev:\\n$err\" if $shark->live($dev, \\$err);\r\n\r\n        # on live capture, a ctrl-c interrupt the loop\r\n        $shark->process_all();\r\n\r\n        $shark->close();\r\n\r\n        printf \"Number of connections/disconnections: %u/%u\\n\", $cnx, $dcnx;\r\n```\r\n\r\nDescription\r\n=========================\r\n\r\nThis Perl module is able to study PostgreSQL traffic captured from a\r\nnetwork interface and call various functions for each messages of the\r\nprotocol. The network dump could be live or from a pcap file (using\r\ntcpdump as instance).\r\n\r\npgShark comes with various sample scripts able to do various things with\r\nthese network dumps. See help page of each of them for more\r\ninformations.\r\n\r\nMethods\r\n================================\r\n\r\n    *   new (\\%settings)\r\n\r\n        Static method.\r\n\r\n        Creates a new pgShark object and returns it. It takes a hash as\r\n        parameter with the following settings:\r\n\r\n            {\r\n                'host' => IP address of the server\r\n                'port' => Port of the PostgreSQL server\r\n                'protocol' => the protocol version, ie. 2 or 3\r\n                'procs' => {\r\n                    # Hash of callbacks for each messages.\r\n                    'message name' => \\&callback\r\n                    ...\r\n                }\r\n                'debug' => $level\r\n            }\r\n\r\n        When 'host' key is not given, pgShark will wait for a message coming\r\n        from the backend or the frontend with no doubt before calling user\r\n        callbacks. Depending on the network activity, it can takes more or\r\n        less time and messages might be lost (usually, COPY related ones).\r\n        If you really need *ALL* messages, set the 'host' key explicitly.\r\n\r\n        pgShark is not able to detect which port the server is listening.\r\n        Default is PostgreSQL's ones, ie. 5432. Make sure to always set the\r\n        proper port or pgShark will just filter out your PostgreSQL traffic\r\n        if it's not on 5432.\r\n\r\n        If not defined, the protocol version by default is 3.\r\n\r\n        The 'procs' hash associate a callback to each messages of the\r\n        PostgreSQL protocol you are interested in. See the following link\r\n        about available message names and definitions:\r\n\r\n          http://www.postgresql.org/docs/current/static/protocol-message-formats.html\r\n\r\n        One messages type has been added to both protocols: SSLAnswer.\r\n\r\n        The 'debug' key in settings can be set between 0 and 6, 0 is the\r\n        default with no debug message, 6 is the most verbose. Because of\r\n        internal performance consideration, you MUST set the environment\r\n        variable DEBUG to '1' to actually activate the debugging messages.\r\n\r\n    *   live ($interface, \\$err)\r\n\r\n        Open a live capture on given interface from first parameter. The\r\n        second parameter is a reference to a string. It will be filled with\r\n        the error message if the method fails.\r\n\r\n        Returns 0 on success, 1 on failure\r\n\r\n    *   open ($file, \\$err)\r\n\r\n        Open a given pcap file from first parameter. The second parameter is\r\n        a reference to a string. It will be filled with the error message if\r\n        the method fails.\r\n\r\n        Returns 0 on success, 1 on failure.\r\n\r\n    *   close ()\r\n\r\n        Close the pcap handle previously opened with this object using\r\n        either pgShark::live() or pgShark::open() methods.\r\n\r\n    *   process_all ()\r\n\r\n        Loop over all available packets from the previously opened pcap\r\n        handle.\r\n\r\n    *   dec2dot ($ip_addr)\r\n\r\n        Static method.\r\n\r\n        Convert a decimal IP address representation given as first parameter\r\n        to the human notation \"ww.xx.yy.zz\".\r\n\r\n    *   normalize_query ($query)\r\n\r\n        Static method.\r\n\r\n        Returns the normalized version of the query given as first\r\n        parameter.\r\n\r\nBinaries\r\n==================\r\n\r\n    For details, see the output of parameter \"--help\" for each of them.\r\n\r\n    *   pgs-badger\r\n\r\n        This script analyse the pcap traffics and outputs various statistics\r\n        about what was found in PostgreSQL protocol.\r\n\r\n        The report contains most popular queries, slowest cumulated ones,\r\n        slowest queries ever, classification of queries by type, sessions\r\n        time, number of connexion, errors, notices, etc.\r\n\r\n        The network dump could be live or from a pcap file (using tcpdump\r\n        for instance).\r\n\r\n        In a futur version this script is supposed to talk with pgbadger\r\n        directly !\r\n\r\n    *   pgs-debug\r\n\r\n        Outputs the PostgreSQL messages in human readable format. Useful to\r\n        analyze what is in a network dump before using pgshark on some other\r\n        duties.\r\n\r\n    *   pgs-normalize\r\n\r\n        The \"pgs-normalize\" script tries to normalize queries and prepared\r\n        statements and output them to stdout. Its purpose is to give you a\r\n        list of unique queries, whatever the number of time they have been\r\n        sent by clients and whatever their parameters were.\r\n\r\n    *   pgs-record\r\n\r\n        \"pgs-record\" filters network traffic and dump PostgreSQL related\r\n        activity to a pcap file. The pcap file can then be processed with\r\n        all available pgShark tools.\r\n\r\n        \"pgs-record\" rely on perl Net::Pcap module. However, unlike\r\n        Net::Pcap, \"tcpdump\" is able to set a bigger capture buffer using\r\n        recent libpcap. Default buffer size is often too small to be able to\r\n        dump all tcp datagram quickly enough. Because of this buffer size\r\n        (1MB), on high loaded systems, you might loose packets. Therefor, by\r\n        default, \"pgs-record\" will try to act as a wrapper around c<tcpdump>\r\n        if it is available on the system and set the buffer to \"32M\".\r\n\r\n        Capturing high throughput traffic, make sure your CPU, disks and\r\n        memory are good enough to deal with the amount of data. You might\r\n        want to set the capture buffer to 256MB or more and redirect\r\n        directly to a file for future use.\r\n\r\n    *   pgs-replay\r\n\r\n        <pgs-replay> send the PostgreSQL messages to a given PostgreSQL\r\n        cluster. The network dump could be live or from a pcap file (using\r\n        tcpdump for instance).\r\n\r\n        This script only supports protocol v3, making it compatilible with\r\n        versions 7.4 to 9.2 of PostgreSQL.\r\n\r\n        This script currently does not support any kind of authentication on\r\n        the remote PostgreSQL cluster where messages are send. Make sure it\r\n        can connect using ident, peer or trust.\r\n\r\n    *   pgs-sql\r\n\r\n        Writes captured queries on stdout. Because of the SQL language\r\n        doesn't support unnamed prepared statement, this script actually try\r\n        to names them. Presently, this script doesn't support cursors nor\r\n        COPY messages.\r\n\r\n    *   pgs-stat\r\n\r\n        Outputs various informations about PostgreSQL activity on the\r\n        network on a given sampling period.\r\n\r\nSee also\r\n===========\r\n\r\n    This module rely on two modules to parse message of protocols v2 and v3:\r\n    pgShark::protocol_2 and pgShark::protocol_3.\r\n\r\nLICENSING\r\n================\r\n\r\n    This program is open source, licensed under the simplified BSD license.\r\n    For license terms, see the LICENSE provided with the sources.\r\n\r\nAUTHORS\r\n============\r\n\r\n    Jehan-Guillaume de Rorthais <jgdr@dalibo.com>\r\n\r\n    Nicolas Thauvin <nicolas.thauvin@dalibo.com>\r\n\r\n    Guillaume Lelarge <guillaume.lelarge@dalibo.com>\r\n\r\n    Copyright: (C) 2012-2014 Jehan-Guillaume de Rorthais - All rights\r\n    reserved.\r\n\r\n    Dalibo's team. http://www.dalibo.org\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}