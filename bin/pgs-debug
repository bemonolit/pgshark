#!/usr/bin/perl
# This program is open source, licensed under the simplified BSD license.
# For license terms, see the LICENSE file.

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use pgShark;

my $shark;
my %args = (
    'help'      => 0,
    'debug'     => 0,
    'interface' => '',
    'host'      => '127.0.0.1',
    'port'      => 5432,
    'read'      => '',
    '2'         => 0,
    '3'         => 0
);

#prelude
# Prints mandatored fields for any kind of message as prelude
# @param $pg_msg The pgsql message hash
sub prelude {
    my $pg_msg       = shift;

    printf "Packet: t=%s, session=%s\n", $pg_msg->{'timestamp'},
        $pg_msg->{'sess_hash'};
    printf "PGSQL: type=%s, ", $pg_msg->{'type'};
    if ( $pg_msg->{'from'} eq 'B' ) {
        printf "B -> F\n";
    }
    else {
        printf "F -> B\n";
    }
}

#code_reponse
# Prints code and message of each fields from a error or notice message
sub code_response {
    my $pg_msg = shift;

    foreach my $code ( keys %{ $pg_msg->{'fields'} } ) {
        my $value = $pg_msg->{'fields'}->{$code};
    SWITCH: {

            #S C M D H P p q W F L R
            if ( $code eq 'S' ) {
                printf "  Severity: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'C' ) {
                printf "  Code: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'M' ) {
                printf "  Message: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'D' ) {
                printf "  Detail: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'H' ) {
                printf "  Hint: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'P' ) {
                printf "  Position: '%s'n", $value;
                last SWITCH;
            }
            if ( $code eq 'p' ) {
                printf "  Internal position: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'q' ) {
                printf "  Internal query: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'W' ) {
                printf "  Where: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'F' ) {
                printf "  File: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'L' ) {
                printf "  Line: '%s'\n", $value;
                last SWITCH;
            }
            if ( $code eq 'R' ) {
                printf "  Routine: '%s'\n", $value;
                last SWITCH;
            }
        }
    }
}

sub Authentication {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "AUTHENTIFICATION REQUEST code=%d ", $pg_msg->{'code'};

SWITCH: {
        if ( $pg_msg->{'code'} == 0 ) {
            printf "(SUCCESS)\n\n";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 2 ) {
            printf "(Kerberos V5)\n\n";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 3 ) {
            printf "(clear-text password)\n\n";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 5 ) {
            printf "(MD5 salt='%s')\n\n", unpack( 'h*', $pg_msg->{'salt'} );
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 6 ) {
            printf "(SCM)\n\n";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 7 ) {
            printf "(GSSAPI)\n\n";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 9 ) {
            printf "(SSPI)\n\n";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 8 ) {
            printf "(contains GSSAPI or SSPI data)\n\n";
            last SWITCH;
        }
    }
}

sub BackendKeyData {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "BACKEND KEY DATA pid=%d, key=%d\n\n", $pg_msg->{'pid'},
        $pg_msg->{'key'};
}

sub Bind {
    my $pg_msg = shift;
    prelude( $pg_msg );

    map { $_ = 'NULL' if not defined } @{ $pg_msg->{'params'} };

    printf
        "BIND portal='%s', name='%s', num_formats=%d, formats=%s, num_params=%d, params=%s\n\n",
        $pg_msg->{'portal'}, $pg_msg->{'name'}, $pg_msg->{'num_formats'},
        join( ', ', @{ $pg_msg->{'params_types'} } ),
        $pg_msg->{'num_params'}, join( ', ', @{ $pg_msg->{'params'} } );
}

sub BindComplete {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "BIND COMPLETE\n\n";
}

sub CancelRequest {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "CANCEL REQUEST pid=%s, key=%s\n\n", $pg_msg->{'pid'},
        $pg_msg->{'key'};
}

sub Close {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "CLOSE kind='%s', name='%s'\n\n", $pg_msg->{'kind'},
        $pg_msg->{'name'};
}

sub CloseComplete {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "CLOSE COMPLETE\n\n";
}

sub CommandComplete {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "COMMAND COMPLETE command='%s'\n\n", $pg_msg->{'command'};
}

sub CopyData {
    my $pg_msg = shift;

    prelude( $pg_msg );

    printf "COPY DATA len=%d\n\n", length( $pg_msg->{'row'} );
}

sub CopyDone {
    my $pg_msg = shift;

    prelude( $pg_msg );

    printf "COPY DONE\n\n";
}

sub CopyFail {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "COPY FAIL error='%s'\n\n", $pg_msg->{'error'};
}

sub CopyInResponse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf
        "COPY IN RESPONSE copy format=%d, num_fields=%d, fields_formats=%s\n\n",
        $pg_msg->{'copy_format'}, $pg_msg->{'num_fields'},
        join( ', ', @{ $pg_msg->{'fields_formats'} } );
}

sub CopyOutResponse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf
        "COPY OUT RESPONSE copy format=%d, num_fields=%d, fields_formats=%s\n\n",
        $pg_msg->{'copy_format'}, $pg_msg->{'num_fields'},
        join( ', ', @{ $pg_msg->{'fields_formats'} } );
}

sub CursorResponse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "CURSOR RESPONSE name='%s'\n\n", $pg_msg->{'name'};
}

sub DataRow {
    my $pg_msg = shift;
    my $i      = 0;
    prelude( $pg_msg );

    printf "DATA ROW num_values=%d\n", $pg_msg->{'num_values'};

    for my $value ( @{ $pg_msg->{'values'} } ) {
        $i++;
        if ( defined $value->[1] ) {
            $value->[1] =~ tr/\x00-\x1F\x80-\xFF/./;
            $value->[1] = "'$value->[1]'";
        }
        else {
            $value->[1] = 'NULL';
        }
        printf "  ---[Value %02d]---\n  length=%d\n  value=%s\n", $i,
            @{$value};
    }
    print "\n";
}

sub Describe {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "DESCRIBE kind='%s', name='%s'\n\n", $pg_msg->{'kind'},
        $pg_msg->{'name'};
}

sub EmptyQueryResponse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "EMPTY QUERY RESPONSE\n\n";
}

sub ErrorResponse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "ERROR RESPONSE\n";
    code_response($pg_msg);

    print "\n";
}

sub Execute {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "EXECUTE name='%s', nb_rows=%d\n\n", $pg_msg->{'name'},
        $pg_msg->{'nb_rows'};
}

sub Flush {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "FLUSH\n\n";
}

sub HotStandbyFeedback {
	my $pg_msg = shift;
	prelude($pg_msg);

	printf "HOT-STANDBY FEEDBACK\n\n";
}

sub NoData {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "NO DATA\n\n";
}

sub NoticeResponse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "NOTICE RESPONSE\n\n";
    code_response($pg_msg);

    print "\n";
}

sub NotificationResponse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "NOTIFICATION RESPONSE pid=%d, channel='%s', payload='%s'\n\n",
        $pg_msg->{'pid'}, $pg_msg->{'channel'}, $pg_msg->{'payload'},;
}

sub ParameterDescription {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "PARAMETER DESCRIPTION: num_param=%d, params_oids=%s\n\n",
        $pg_msg->{'num_params'}, join( ', ', @{ $pg_msg->{'params_types'} } );
}

sub ParameterStatus {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "PARAMETER STATUS name='%s', value='%s'\n\n", $pg_msg->{'name'},
        $pg_msg->{'value'};
}

sub Parse {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "PARSE name='%s', num_params=%d, params_type=%s, query=%s\n\n",
        $pg_msg->{'name'}, $pg_msg->{'num_params'},
        join( ', ', @{ $pg_msg->{'params_types'} } ), $pg_msg->{'query'};
}

sub ParseComplete {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "PARSE COMPLETE\n\n";
}

sub PasswordMessage {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "PASSWORD MESSAGE password=%s\n\n", $pg_msg->{'password'};
}

sub PortalSuspended {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "PORTAL SUSPENDED\n\n";
}

sub PrimaryKeepalive {
	my $pg_msg = shift;
	prelude($pg_msg);

	printf "PRIMARY KEEP-ALIVE\n\n";
}

sub Query {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "QUERY query=%s\n\n", $pg_msg->{'query'};
}

sub ReadyForQuery {
    my $pg_msg = shift;
    prelude( $pg_msg );

    $pg_msg->{'status'} = '?' if not defined $pg_msg->{'status'};

    if ( $pg_msg->{'status'} eq 'I' ) {
        printf "READY FOR QUERY type=<IDLE>\n\n";
    }
    elsif ( $pg_msg->{'status'} eq 'T' ) {
        printf "READY FOR QUERY type=<IDLE> in transaction\n\n";
    }
    elsif ( $pg_msg->{'status'} eq 'E' ) {
        printf "READY FOR QUERY type=<IDLE> in transaction (aborted)\n\n";
    }
    else {

        # protocol v2 has no status
        printf "READY FOR QUERY\n\n";
    }
}

sub RowDescription {
    my $pg_msg = shift;
    my $i      = 0;
    prelude( $pg_msg );

    printf "ROW DESCRIPTION: num_fields=%d\n", $pg_msg->{'num_fields'};

    for my $field ( @{ $pg_msg->{'fields'} } ) {
        $i++;
        printf
            "  ---[Field %02d]---\n  name='%s'\n  type=%d\n  type_len=%d\n  type_mod=%d\n",
            $i, $field->[0], $field->[3], $field->[4], $field->[5];

        printf( "  relid=%d\n  attnum=%d\n  format=%d\n",
            $field->[1], $field->[2], $field->[6] )
            if defined $field->[1];
    }
    print "\n";
}

sub SSLAnswer {
    my $pg_msg = shift;

    prelude( $pg_msg );

    printf "SSL BACKEND ANSWER: %s\n\n", $pg_msg->{'ssl_answer'};
}

sub SSLRequest {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "SSL REQUEST\n\n";
}

sub StandbyStatusUpdate {
	my $pg_msg = shift;
	prelude($pg_msg);

	printf "STANDBY STATUS UPDATE\n\n";
}

sub StartupMessage {
    my $pg_msg = shift;
    my $i      = 0;
    prelude( $pg_msg );

    printf "STARTUP MESSAGE version: %s\n", $pg_msg->{'version'};

    foreach my $param ( keys %{ $pg_msg->{'params'} } ) {
        printf "  %s=%s\n", $param, $pg_msg->{'params'}->{$param};
    }
    print "\n";
}

sub Sync {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "SYNC\n\n";
}

sub Terminate {
    my $pg_msg = shift;
    prelude( $pg_msg );

    printf "DISCONNECT\n\n";
}

sub XLogData {
	my $pg_msg = shift;
	prelude($pg_msg);

	printf "XLOG DATA len=%d\n\n", length($pg_msg->{'data'});
}

Getopt::Long::Configure('bundling');
GetOptions(
    \%args, qw{
        help
        debug|d+
        interface|i=s
        host|h=s
        port|p=s
        read|r=s
        2+
        3+
        }
) or pod2usage( -exitval => 2 );

pod2usage( -verbose => 2 ) if $args{'help'};

pod2usage(
    -message => "Options -2 and -3 are mutal exclusives.\n",
    -exitval => 1
) if $args{'2'} and $args{'3'};

pod2usage(
    -message => "Arguments --interface and --read are incompatible.\n"
        . "Either listen from the network or open a pcap file.",
    -exitval => 1
) if $args{'interface'} ne '' and $args{'read'} ne '';

$args{'protocol'} = $args{'2'} ? 2 : 3;

$shark = pgShark->new(
    {   'procs' => {
            'AuthenticationOk'                => \&Authentication,
            'AuthenticationKerberosV5'        => \&Authentication,
            'AuthenticationCleartextPassword' => \&Authentication,
            'AuthenticationCryptPassword'     => \&Authentication,
            'AuthenticationMD5Password'       => \&Authentication,
            'AuthenticationSCMCredential'     => \&Authentication,
            'AuthenticationGSS'               => \&Authentication,
            'AuthenticationSSPI'              => \&Authentication,
            'AuthenticationGSSContinue'       => \&Authentication,
            'BackendKeyData'                  => \&BackendKeyData,
            'Bind'                            => \&Bind,
            'BindComplete'                    => \&BindComplete,
            'CancelRequest'                   => \&CancelRequest,
            'Close'                           => \&Close,
            'CloseComplete'                   => \&CloseComplete,
            'CommandComplete'                 => \&CommandComplete,
            'CopyData'                        => \&CopyData,
            'CopyDone'                        => \&CopyDone,
            'CopyFail'                        => \&CopyFail,
            'CopyInResponse'                  => \&CopyInResponse,
            'CopyOutResponse'                 => \&CopyOutResponse,
            'CursorResponse'                  => \&CursorResponse,
            'DataRow'                         => \&DataRow,
            'Describe'                        => \&Describe,
            'EmptyQueryResponse'              => \&EmptyQueryResponse,
            'ErrorResponse'                   => \&ErrorResponse,
            'Execute'                         => \&Execute,
            'Flush'                           => \&Flush,

            # 'FunctionCall' => sub {},
            # 'FunctionCallResponse' => sub {},
            'NoData'               => \&NoData,
            'NoticeResponse'       => \&NoticeResponse,
            'NotificationResponse' => \&NotificationResponse,
            'ParameterDescription' => \&ParameterDescription,
            'ParameterStatus'      => \&ParameterStatus,
            'Parse'                => \&Parse,
            'ParseComplete'        => \&ParseComplete,
            'PasswordMessage'      => \&PasswordMessage,
            'PortalSuspended'      => \&PortalSuspended,
            'Query'                => \&Query,
            'ReadyForQuery'        => \&ReadyForQuery,
            'RowDescription'       => \&RowDescription,
            'SSLAnswer'            => \&SSLAnswer,
            'SSLRequest'           => \&SSLRequest,
            'StartupMessage'       => \&StartupMessage,
            'Sync'                 => \&Sync,
            'Terminate'            => \&Terminate,
            # replication messages
            'HotStandbyFeedback'   => \&HotStandbyFeedback,
            'PrimaryKeepalive'     => \&PrimaryKeepalive,
            'StandbyStatusUpdate'  => \&StandbyStatusUpdate,
            'XLogData'             => \&XLogData
        },
        'host'     => $args{'host'},
        'port'     => $args{'port'},
        'protocol' => $args{'protocol'},
        'debug'    => $args{'debug'}
    }
);

# open a live capture on given interface
if ( $args{'interface'} ne '' ) {
    my $err = '';

    ( $shark->live( $args{'interface'}, \$err ) == 0 )
        or die("Can not open interface '$args{'interface'}':\n$err");
}

# we have no interface to listen on,
# either open given pcap file or start reading from stdin
else {
    my $err = '';

    # read from stdin if no pcap file given
    $args{'read'} = '-' if $args{'read'} eq '';

    ( $shark->open( $args{'read'}, \$err ) == 0 )
        or die("Can not read from file '$args{'read'}':\n$err");
}

# on live capture, a ctrl-C interrupt the loop
$shark->process_all();

$shark->close();

exit 0;

__END__

=head1 pgs-debug

pgs-debug - Prints out properties of pgsql messages found in a pcap dump.

Belongs to the pgShark scripts collection.

=head1 SYNOPSIS

=over 2

=item pgs-debug --help

=item pgs-debug [-2|-3] [--read file|--interface DEV] [--host IPADDR] [--port PORT]

=back

=head1 DESCRIPTION

B<pgs-debug> outputs the PostgreSQL messages in human readable format. Useful to analyze what is in a network
dump before using pgshark on some other duties. The network dump could be live or from a pcap file (using tcpdump for instance).

=over 2

=item B<--help>

Show this help message and exit.

=item B<-2>

Dissect the pcap flow using PostgreSQL v2.0 protocol.

=item B<-3>

Dissect the pcap flow using PostgreSQL v3.0 protocol. This is the default.

=item B<-h>, B<--host> <ip address>

Gives the IP address of the PostgreSQL server. By default, set to 127.0.0.1.

=item B<-p>, B<--port> <port>

Gives the port the PostgreSQL backend is listening on. By default, set to 5432

=item B<-i>, B<--interface> <interface name>

Capture PostgreSQL traffic directly from the given network interface. Conflict with B<--read>.
By default, B<pgs-debug> will read from stdin if neither B<--read> or B<--interface> are given.

=item B<-r>, B<--read> <path to file>

Read PostgreSQL traffic from given pcap file. Conflict with B<--interface>.
By default, B<pgs-debug> will read from stdin if neither B<--read> or B<--interface> are given.

=back

=head1 EXAMPLE

Listening on interface C<eth0>, debugging PostgreSQL messages with a cluster reachable on '192.168.42.5':

=over 2

C<pgs-debug --host 192.168.42.5 -i eth0>

=back

The following example shows how to work with a server that is B<NOT> listening on localhost and the default 5432 port. (1)
dump from C<eth0> every packets from/to the port 5490. C<-s 0> is requiered on some older version of tcpdump to dump
the whole packets. (2) Here C<--host> and C<--port> are B<important> to notify pgshark who is the PostgreSQL server in the network dump and its working port.

=over 2

C<tcpdump -i eth0 -w /tmp/tcp_5490.pcap -s 0 'tcp and port 5490'> (1)

C<pgs-debug --port 5490 --host 192.168.42.5 -r /tmp/tcp_5490.pcap> (2)

=back

=head1 AUTHORS

Jehan-Guillaume (ioguix) de Rorthais, jgdr at dalibo dot com.

Dalibo's team.

http://www.dalibo.org

=head1 SEE ALSO

The pgShark wiki on github : https://github.com/dalibo/pgshark/wiki

=head1 LICENSING

This program is open source, licensed under the simplified BSD license. For license terms, see the LICENSE provided
with the sources.

=cut
